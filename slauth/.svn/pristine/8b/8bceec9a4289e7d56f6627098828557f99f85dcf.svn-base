'use strict';
var app = require('../../server/server');
var shortid = require('shortid');
var limit = 12;
var _ = require("underscore");

module.exports = function(Userxapp) {
  Userxapp.validatesUniquenessOf({scopedTo: ['username', 'appcode']});
  Userxapp.observe('access', function setMaxLimit(ctx, next) {
    ctx.query.limit = limit;
    next();
  });
  Userxapp.afterRemote('**', function (ctx, result, next) {
    var where = ctx.args;
    if(ctx.args.filter) {
      where = JSON.parse(ctx.args.filter).where;
    }
    Userxapp.count(where, function (err, count) {
      _.extend(ctx.result, {'total': count});
      _.extend(ctx.result, {'page': count / limit});
      next();
    })
  });
  Userxapp.listUserxApp = function(token, deleted, callback) {
    app.models.Token._validToken(token).then(function(result){
      Userxapp.dataSource.connector.execute('SELECT userxapp.id, userxapp.username, userxapp.appcode, userxapp.deleted, userxapp.notes, userxapp.adddate, userxapp.addwho, userxapp.editdate, userxapp.editwho FROM userxapp WHERE userxapp.deleted = ?', [deleted], function(err, obj){
        if(err) callback(err);
        callback(null, obj);
      })
    }).catch(function(err){
      callback(err);
    })
  };
  Userxapp.saveUserxApp = function(token, username, appcode, notes, addwho, editwho, callback) {
    app.models.Token._validToken(token).then(function(result){
      Userxapp.findOne({where: {'username': username, 'appcode': appcode}}).then(function(obj){
        if(obj){
          Userxapp.updateAll({'username': username, 'appcode': appcode},{
            'deleted': 0,
            'notes': notes,
            'editdate': new Date().toISOString(),
            'editwho': editwho,
          }).then(function(obj){
            callback(null, obj);
          }).catch(function(err){
            callback(err);
          })
        } else {
          Userxapp.create({
            'username': username,
            'appcode': appcode,
            'deleted': 0,
            'notes': notes,
            'adddate': new Date().toISOString(),
            'addwho': addwho,
          }).then(function(obj){
            callback(null, obj);
          }).catch(function(err){
            callback(err);
          })
        }
      })
    }).catch(function(err){
      callback(err);
    })
  };
  Userxapp.deleteUserxApp = function(token, username, notes, editwho, callback) {
    app.models.Token._validToken(token).then(function(result){
      Userxapp.updateAll({'username': username},{
        'deleted': 1,
        'notes': notes,
        'editdate': new Date().toISOString(),
        'editwho': editwho,
      }).then(function(obj){
        callback(null, obj);
      }).catch(function(err){
        callback(err);
      })
    }).catch(function(err){
      callback(err);
    })
  };
  Userxapp.findUserxApp = function(token, filter, callback) {
    app.models.Token._validToken(token).then(function(result){
      Userxapp.find(JSON.parse(filter)).then(function(obj){
        callback(null, obj);
      }).catch(function(err){
        callback(err);
      })
    }).catch(function(err){
      callback(err);
    })
  };
  Userxapp.getAppsUserxApp = function(token, username, parentuser, deleted, callback) {
    app.models.Token._validToken(token).then(function(result){
      let strSQL = '';
      if(parentuser === ''){
        strSQL = 'SELECT apps.id, apps.appcode,apps.appname, apps.deleted, apps.notes, apps.adddate, apps.addwho, apps.editdate, apps.editwho FROM apps left join Userxapp on apps.appcode = Userxapp.appcode where Userxapp.username = "'+ username +'" and Userxapp.deleted = '+ deleted +' ';
      } else {
        strSQL = 'SELECT apps.id, apps.appcode,apps.appname, apps.deleted, apps.notes, apps.adddate, apps.addwho, apps.editdate, apps.editwho FROM apps '
        +'left join Userxapp child on apps.appcode = child.appcode '
        +'left join Userxapp parent on apps.appcode = parent.appcode ' 
        +'where child.username = "'+ username +'" and parent.username = "'+ parentuser +'" and child.deleted = '+ deleted +' and parent.deleted = '+ deleted +' ';
      }
      
      Userxapp.dataSource.connector.execute(strSQL, [], function(err, obj){
        if(err) callback(err);
        callback(null, obj);
      })
    }).catch(function(err){
      callback(err);
    })
  };
};
