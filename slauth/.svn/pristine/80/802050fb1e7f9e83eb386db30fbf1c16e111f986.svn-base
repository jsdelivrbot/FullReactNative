import { Component, OnInit, ViewChild, ElementRef, Renderer } from '@angular/core';
import { Router } from '@angular/router';
import { AppServices } from './../../app.services';
import { NotifyService } from './../../notify.service';
import { AuthService } from './../../auth/auth.service';
import { NgStyle } from '@angular/common';
declare var $:any;
declare var Waypoint:any;
@Component({
  selector: 'app-admin-roles',
  templateUrl: './admin-roles.component.html',
  styleUrls: ['./admin-roles.component.css']
})
export class AdminRolesComponent implements OnInit {
  @ViewChild('myModal') el:ElementRef;
  data_roles; ; selected_roles; total_roles;
  data_parentuser = [];
  count_roles = 0; delete_roles = [];
  filter;
  constructor(private router: Router, private appServices: AppServices, private notifyService: NotifyService, private authService: AuthService) { }
  ngOnInit() {
    this.loadRolesData();
    this.loadParentUserData();
    new Waypoint({
      element: document.getElementById('pagination'),
      handler: (direction) => {
        if(direction == 'down') {
          this.notifyService.show('Load more');
          this.loadRolesData('', this.count_roles);
        }
      },
      context: document.getElementById('pagination').parentElement.parentElement.parentElement,
    })
  }
  loadParentUserData() {
    this.appServices.listUsers({'token': this.appServices.session.token.id, 'deleted': false, 'parentuser': ''}, this).then(function(obj){
      obj.component.data_parentuser = obj.response.json().res;
    }).catch(function(err){
      err.component.authService.catchErr(err);
      if(err.err.json().error.message === 'INVALID_ACCESS'){
        err.component.authService.logout();
      }
    })
  }
  loadRolesData(param = '', skip = 0) {
    if(param) {
      this.filter = $.extend(this.filter, param);
      let paramIndex = Object.keys(this.filter).indexOf(Object.keys(param)[0]);
      if(!(Object.values(this.filter)[paramIndex]).like){
        delete this.filter[Object.keys(param)[0]];
      }
    }
    if (skip === 0) {
      this.data_roles = [];
      this.count_roles = skip;
      this.delete_roles = [];
    }
    let _filter = {};
    if(this.appServices.session.isAdmin){
      _filter = {'deleted': false};
    } else {
      _filter = {'deleted': false, 'parentuser': this.appServices.session.token.uid};
    }
    this.appServices.findRoles({'token': this.appServices.session.token.id, 'filter': JSON.stringify({'where': $.extend(_filter, this.filter), 'skip': skip})}, this).then(function(obj){
      let json = obj.response.json();
      if(obj.component.data_roles) {
        obj.component.data_roles = obj.component.data_roles.concat(json.res);
      }
      else {
        obj.component.data_roles = json.res;
      }
      obj.component.count_roles += json.res.length;
      obj.component.total_roles = json.total;
      Waypoint.refreshAll();
    }).catch(function(err){
      err.component.authService.catchErr(err);
    })
  }
  insertRolesData(data) {
      data['deleted'] = false;
      data['addwho'] = this.appServices.session.token.uid;
      data['token'] =this.appServices.session.token.id;
      data['parentuser'] = data['parentuser']?data['parentuser']:(this.appServices.session.token.uid);
      this.appServices.insertRoles(data, this).then(function(success){
        let res = success.response.json().res;
        success.component.notifyService.show('Process Done');
        success.component.el.nativeElement.click();
        success.component.router.navigate(['admin/roles/' + res.id]);
      }).catch(function(err){
        err.component.authService.catchErr(err);
      })
  }
  onChoose(e, data){
    if(e.target.checked) {
      this.delete_roles.push(data);
    }
    else {
      let index = this.delete_roles.indexOf(data);
      this.delete_roles.splice(index, 1);
    }
  }
  findRolesData(data){
    this.router.navigate(['admin/roles/'+ Object.assign({}, data).id]);
  }
  deleteRolesData(){
      this.delete_roles.forEach((value, index, arr) => {
        value['deleted'] = true;
        value['editwho'] =this.appServices.session.token.uid;
        value['token'] =this.appServices.session.token.id;
        this.appServices.updateRoles(value, this).then(function(success){
          success.component.notifyService.show('Process Done');
          success.component.loadRolesData();
        }).catch(function(err){
          err.component.authService.catchErr(err);
        })
      })
  }
  checkAll(e) {
    if(e.srcElement.checked){
      this.data_roles.forEach(curr_data=>{
        curr_data.state = e.target.checked;
        if(!this.delete_roles.includes(curr_data)){
          this.delete_roles.push(curr_data);
        }
      })
    } else {
      this.data_roles.forEach(x=>x.state = e.target.checked);
      this.delete_roles = [];
    }
  }
  isAllChecked() {
    return this.data_roles.every(_ => _.state);
  }
}
