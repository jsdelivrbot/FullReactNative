import { Injectable } from '@angular/core';
import { Http, Headers } from '@angular/http';
import { AppServices } from './../app.services';
import { Router } from '@angular/router';
import { NotifyService } from './../notify.service';
declare var $:any;
@Injectable()
export class AuthService {
  constructor(private http: Http, private router: Router, private appServices: AppServices, private notifyService: NotifyService) {
  }
  login(session) {
    this.closeModal();
    sessionStorage.setItem('session', session);
    this.appServices.session = JSON.parse(sessionStorage.getItem('session'));
    this.router.navigate(['admin/home']);
  }
  logout() {
    this.closeModal();
    sessionStorage.removeItem('session');
    this.router.navigate(['admin/login']);
  }
  updateService(session){
    sessionStorage.setItem('session', session);
    this.appServices.session = JSON.parse(sessionStorage.getItem('session'));
  }
  closeModal(){
    $('.modal').modal('hide');
    $('.modal-backdrop').hide();
  }
  expired(){
    this.closeModal();
    this.appServices.session.showDialog = true;
    sessionStorage.removeItem('session');
  }
  checkRole(menuurl){
    if(typeof this.appServices.session[menuurl] === 'undefined'){
      return  this.appServices.session.listmenu.filter((z)=>{
        if(z.menuurl === menuurl) {
          this.appServices.session[menuurl] = {'readonly': z.readonly, 'edit': z.edit};
          return this.appServices.session[menuurl];
        }
      })[0]
    } else {
      return this.appServices.session[menuurl];
    }
  }
  catchErr(err){
    let message = typeof err.err === 'undefined' ? 'Error' : err.err.json().error.message;
    this.notifyService.show(message, 'danger');
    if(message === 'TOKEN_EXPIRED'){
      this.expired();
    } else if(message === 'INVALID_ACCESS'){
      this.logout();
    }
  }
}
