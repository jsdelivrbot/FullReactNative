'use strict';
var app = require('../../server/server');
var shortid = require('shortid');
var limit = 12;
var _ = require("underscore");

module.exports = function(RolexMenu) {
  RolexMenu.validatesUniquenessOf({scopedTo: ['rolecode', 'menucode']});
  RolexMenu.observe('access', function setMaxLimit(ctx, next) {
    ctx.query.limit = limit;
    next();
  });

  RolexMenu.afterRemote('**', function (ctx, result, next) {
    var where = ctx.args;
    if(ctx.args.filter) {
      where = JSON.parse(ctx.args.filter).where;
    }
    RolexMenu.count(where, function (err, count) {
      _.extend(ctx.result, {'total': count});
      _.extend(ctx.result, {'page': count / limit});
      next();
    })
  });

  RolexMenu.listRolexMenu = function(token, deleted, skip, callback) {
    app.models.Token._validToken(token).then(function(result){
      RolexMenu.find({where: {'deleted': deleted}, skip: skip}).then(function(obj){
        callback(null, obj);
      }).catch(function(err){
        callback(err);
      })
    }).catch(function(err){
      callback(err);
    })
  };

  RolexMenu.saveRolexMenu = function(token, rolecode, menucode, readonly, edit, notes, addwho, editwho, callback) {
    app.models.Token._validToken(token).then(function(result){
      RolexMenu.findOne({where: {'rolecode': rolecode, 'menucode': menucode}}).then(function(obj){
        if(obj){
          RolexMenu.updateAll({'rolecode': rolecode, 'menucode': menucode},{
            'readonly': readonly,
            'edit': edit,
            'deleted': 0,
            'notes': notes,
            'editdate': new Date().toISOString(),
            'editwho': editwho,
          }).then(function(obj){
            callback(null, obj);
          }).catch(function(err){
            callback(err);
          })
        } else {
          RolexMenu.create({
            'rolecode': rolecode,
            'menucode': menucode,
            'readonly': readonly,
            'edit': edit,
            'deleted': 0,
            'notes': notes,
            'adddate': new Date().toISOString(),
            'addwho': addwho,
          }).then(function(obj){
            callback(null, obj);
          }).catch(function(err){
            callback(err);
          })
        }
      })
    }).catch(function(err){
      callback(err);
    })
  };

  RolexMenu.deleteRolexMenu = function(token, rolecode, notes, editwho, callback) {
    app.models.Token._validToken(token).then(function(result){
      RolexMenu.updateAll({'rolecode': rolecode},{
        'deleted': true,
        'notes': notes,
        'editdate': new Date().toISOString(),
        'editwho': editwho,
      }).then(function(obj){
        callback(null, obj);
      }).catch(function(err){
        callback(err);
      })
    }).catch(function(err){
      callback(err);
    })
  };


  RolexMenu.findRolexMenu = function(token, filter, callback) {
    app.models.Token._validToken(token).then(function(result){
      RolexMenu.find(JSON.parse(filter)).then(function(obj){
        callback(null, obj);
      }).catch(function(err){
        callback(err);
      })
    }).catch(function(err){
      callback(err);
    })
  };

  RolexMenu.getMenuRolexMenu = function(token, rolecode, deleted, callback) {
    app.models.Token._validToken(token).then(function(result){
      RolexMenu.dataSource.connector.execute('SELECT rolexmenu.id, rolexmenu.rolecode, rolexmenu.menucode, menu.menuname, rolexmenu.readonly, rolexmenu.edit, menu.deleted, rolexmenu.notes, rolexmenu.adddate, rolexmenu.addwho, rolexmenu.editdate, rolexmenu.editwho FROM rolexmenu left join menu on rolexmenu.menucode = menu.menucode where rolexmenu.rolecode = ? and menu.deleted = ?', [rolecode, deleted], function(err, obj){
        if(err) callback(err);
        callback(null, obj);
      })
    }).catch(function(err){
      callback(err);
    })
 };
};
