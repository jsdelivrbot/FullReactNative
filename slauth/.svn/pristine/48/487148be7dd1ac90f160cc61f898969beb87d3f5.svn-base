'use strict';
var app = require('../../server/server');
var shortid = require('shortid');
var limit = 12;
var _ = require("underscore");
module.exports = function(Warehouse) {
  Warehouse.validatesUniquenessOf('warehousecode');
  Warehouse.observe('access', function setMaxLimit(ctx, next) {
    ctx.query.limit = limit;
    next();
  });
  Warehouse.afterRemote('**', function (ctx, result, next) {
    var where = ctx.args;
    if(ctx.args.filter) {
      where = JSON.parse(ctx.args.filter).where;
    }
    Warehouse.count(where, function (err, count) {
      _.extend(ctx.result, {'total': count});
      _.extend(ctx.result, {'page': count / limit});
      next();
    })
  });
  Warehouse.listWarehouse = function(token, deleted, skip, callback) {
    app.models.Token._validToken(token).then(function(result){
      Warehouse.find({where: {'deleted': deleted}, skip: skip}).then(function(obj){
        callback(null, obj);
      }).catch(function(err){
        callback(err);
      })
    }).catch(function(err){
      callback(err);
    })
  };
  Warehouse.listAllWarehouse = function(token, deleted, parentuser, callback) {
    app.models.Token._validToken(token).then(function(result){
      Warehouse.dataSource.connector.execute('SELECT warehouse.id, warehouse.warehousecode, warehouse.warehousename, warehouse.deleted, warehouse.notes, warehouse.hide, warehouse.adddate, warehouse.addwho, warehouse.editdate, warehouse.editwho from warehouse WHERE warehouse.hide = false and warehouse.parentuser = ? and warehouse.deleted = ?', [parentuser, deleted], function(err, obj){
        if(err) callback(err);
        callback(null, obj);
      })
    }).catch(function(err){
      callback(err);
    })
  };
  Warehouse.insertWarehouse = function(token, warehousecode, warehousename, parentuser, notes, hide, addwho, callback) {
    app.models.Token._validToken(token).then(function(result){
      Warehouse.create({
        'warehousecode': warehousecode,
        'warehousename': warehousename,
        'parentuser': parentuser,
        'deleted': false,
        'notes': notes,
        'hide': hide,
        'adddate': new Date().toISOString(),
        'addwho': addwho,
      }).then(function(obj){
        callback(null, obj);
      }).catch(function(err){
        callback(err);
      })
    }).catch(function(err){
      callback(err);
    })
  };
  Warehouse.updateWarehouse = function(token, warehousecode, warehousename, parentuser, deleted, notes, hide, editwho, callback) {
    app.models.Token._validToken(token).then(function(result){
      Warehouse.findOne({where: {'warehousecode': warehousecode}}).then(function(obj){
        if(obj) {
          Warehouse.updateAll({'warehousecode': warehousecode},{
            'warehousename': warehousename,
            'parentuser': parentuser,
            'deleted': deleted,
            'notes': notes,
            'hide': hide,
            'editdate': new Date().toISOString(),
            'editwho': editwho
          }).then(function(obj){
            callback(null, obj);
          }).catch(function(err){
            callback(err);
          });
        }
        else {
          var err = new Error();
          err.statusCode = err.status = 404;
          err.message = 'Data is not existed';
          callback(err);
        }
      })
    }).catch(function(err){
      callback(err);
    })
  };
  Warehouse.findWarehouse = function(token, filter, callback) {
    app.models.Token._validToken(token).then(function(result){
      Warehouse.find(JSON.parse(filter)).then(function(obj){
        callback(null, obj);
      }).catch(function(err){
        callback(err);
      })
    }).catch(function(err){
      callback(err);
    })
  };
};
