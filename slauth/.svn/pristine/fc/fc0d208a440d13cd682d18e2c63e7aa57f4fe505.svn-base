import { Component, OnInit, ViewChild, ElementRef,Renderer } from '@angular/core';
import { Router } from '@angular/router';
import { AppServices } from './../../app.services';
import { NotifyService } from './../../notify.service';
import { NgStyle } from '@angular/common';
declare var $:any;
declare var Waypoint:any;
@Component({
  selector: 'app-users',
  templateUrl: './users.component.html',
  styleUrls: ['./users.component.css']
})
export class UsersComponent implements OnInit {
  @ViewChild('myModal') el:ElementRef;

  data_users; total_users; selected_users;
  count_users = 0; delete_users = [];
  filter;
  constructor(private router: Router, private appServices: AppServices, private notifyService: NotifyService, private rd: Renderer) { }

  ngOnInit() {
    this.loadUsersData();

    new Waypoint({
      element: document.getElementById('pagination'),
      handler: (direction) => {
        if(direction == 'down') {
          this.notifyService.show('Info', 'Load more');
          this.loadUsersData('', this.count_users);
        }
      },
      context: document.getElementById('pagination').parentElement.parentElement.parentElement,
    })
  }

  loadUsersData(param = '', skip = 0) {
    if(param) {
      this.filter = $.extend(this.filter, param);
      let paramIndex = Object.keys(this.filter).indexOf(Object.keys(param)[0]);
      if(!(Object.values(this.filter)[paramIndex]).like){
        delete this.filter[Object.keys(param)[0]];
      }
    }
    if (skip === 0) {
      this.data_users = [];
      this.count_users = skip;
      this.delete_users = [];
    }
    this.appServices.findUsers({'token': this.appServices.session.token.id, 'filter': JSON.stringify({'where': $.extend({'deleted': false}, this.filter), 'skip': skip})}, this).then((obj)=>{
      let json = obj.response.json();
      if(this.data_users) {
        this.data_users = this.data_users.concat(json.res);
      }
      else {
        this.data_users = json.res;
      }
      this.count_users += json.res.length;
      this.total_users = json.total;
      Waypoint.refreshAll();
    }).catch(function(err){
      //err.component.notifyService.show('Error', err.err.json().error.message, 'danger');
    })
  }

  insertUsersData(data) {
    this.appServices.getUsers(this.appServices.session.token.id, this).then(function(success){
      console.log(data);

        data['deleted'] = false;
        data['addwho'] = success.response.json().res.uid;
        data['type'] = parseInt(data['type']);
        data['token'] = success.response.json().res.id;
        console.log(data);

        success.component.appServices.insertUsers(data, this).then(function(obj){
          let res = obj.response.json().res;
          console.log('Insert success');
          //this.notifyService.show('Info', 'Process Done');
          // this.loadUsersData();
          // success.component.fileInput.nativeElement.click();
           success.component.el.nativeElement.click();
            // success.component.rd.invokeElementMethod(success.component.el.nativeElement,'click');
          success.component.router.navigate(['users/' + res.id]);
        }).catch(function(err){
          console.log('Insert false');
          //err.component.notifyService.show('Error', err.err.json().error.message, 'danger');
        });
      }).catch(function(errtoken){
        console.log('Invalid');
      })
    }

    updateUsersData(data) {
      this.appServices.getUsers(this.appServices.session.token.id, this).then(function(success){
          data['deleted'] = false;
          data['editwho'] = success.response.json().res.uid;
          data['type'] = parseInt(data['type']);
          data['token'] = success.response.json().res.id;
          success.component.appServices.updateUsers(data, this).then(function(obj){
            let res = obj.response.json().res;
            // this.notifyService.show('Info', 'Process Done');
            console.log('update success');
            success.component.loadUsersData();
          }).catch(function(err){
            // err.component.notifyService.show('Error', err.err.json().error.message, 'danger');
            console.log('Insert false');
          });
        }).catch(function(errtoken){
          console.log('Invalid');
        })
    }

    onChoose(e, data){
      if(e.target.checked) {
        this.delete_users.push(data);
      }
      else {
        let index = this.delete_users.indexOf(data);
        this.delete_users.splice(index, 1);
      }
      console.log(this.delete_users);
    }

    findUsersData(data){
      this.router.navigate(['users/'+ data.id]);
    }

    deleteUsersData(){
      this.appServices.getUsers(this.appServices.session.token.id, this).then(function(success){
          success.component.delete_users.forEach((value, index, arr) => {
            value['deleted'] = true;
            value['editwho'] = success.response.json().res.uid;
            value['type'] = parseInt(value['type']);
            value['token'] = success.response.json().res.id;
            success.component.appServices.updateUsers(value, this).then(function(obj){
              let res = obj.response.json().res;
              console.log('delete success');
              // this.notifyService.show('Info', 'Process Done');
              success.component.loadUsersData();
            }).catch(function(err){
              console.log('delete fail');
              // err.component.notifyService.show('Error', err.err.json().error.message, 'danger');
            });
          });
        }).catch(function(errtoken){
          console.log('Invalid');
        })
    }

    // CheckAll data_shipment
    checkAll(e) {
      if(e.srcElement.checked){
        this.data_users.forEach(curr_data=>{
          curr_data.state = e.target.checked;
          if(!this.delete_users.includes(curr_data)){
            this.delete_users.push(curr_data);
          }
        })
      } else {
        this.data_users.forEach(x=>x.state = e.target.checked);
        this.delete_users = [];
      }
      console.log(this.delete_users);
    }

    isAllChecked() {
      return this.data_users.every(_ => _.state);
    }

    // Input
    _keyPress(event: any) {
      const pattern = /[0-9\+\-\ ]/;
      let inputChar = String.fromCharCode(event.charCode);
      if (!pattern.test(inputChar)) {
        // invalid character, prevent input
        event.preventDefault();
      }
    }

}
