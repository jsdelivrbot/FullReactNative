import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { AppServices } from './../../app.services';
import { NotifyService } from './../../notify.service';
import { AuthService } from './../../auth/auth.service';
declare var $:any;
@Component({
  selector: 'app-admin-warehouse',
  templateUrl: './admin-warehouse.component.html',
  styleUrls: ['./admin-warehouse.component.css']
})
export class AdminWarehouseComponent implements OnInit {
  data_warehouse = []; selected_warehouse; delete_warehouse = []; currentPage_warehouse = 1; itemsPerPage_warehouse = 5; total_warehouse = 0; data_itemsPerPage = [];
  data_parentuser = [];
  filter;
  constructor(private router: Router, private appServices: AppServices, private notifyService: NotifyService, private authService: AuthService) {
  }
  ngOnInit() {
    this.loadItemsPerPage();
    this.loadParentUserData();
  }
  loadItemsPerPage(){
    this.appServices.findCodelkup({'token': this.appServices.session.token.id, 'filter': JSON.stringify({'where': {'listname': 'Paginate', 'deleted': false}})}, this)
    .then(function(__){
      let response = __.response.json().res;
      __.component.data_itemsPerPage = response;
      __.component.itemsPerPage_warehouse = response[0].short;
      __.component.loadWarehouseData();
    }).catch((err)=>{
      this.authService.catchErr(err);
    })
  }
  loadParentUserData() {
    this.appServices.findUsers({'token': this.appServices.session.token.id, 'filter': JSON.stringify({'where': {'parentuser': '', 'deleted': false, 'type': 1}})}, this)
    .then(function(__){
      __.component.data_parentuser = __.response.json().res;
    }).catch((err)=>{
      this.authService.catchErr(err);
    })
  }
  loadWarehouseData(param = '') {
    let skip = (this.currentPage_warehouse-1)*this.itemsPerPage_warehouse;
    let limit = this.itemsPerPage_warehouse;
    this.delete_warehouse = [];
    if(param) {
      this.filter = $.extend(this.filter, param);
      let paramIndex = Object.keys(this.filter).indexOf(Object.keys(param)[0]);
      if(!(Object.values(this.filter)[paramIndex])){
        delete this.filter[Object.keys(param)[0]];
      }
    }
    this.appServices.findSysUsers({'token': this.appServices.session.token.id, 'filter': JSON.stringify({'where': {'username': this.appServices.session.token.uid,'deleted': false}})}, this)
    .then(function(__){
      let response = __.response.json();
      let where = response.total > 0 ? {'deleted': false} : {'parentuser': __.component.appServices.session.token.uid, 'deleted': false};
      __.component.appServices.findWarehouse({'token': __.component.appServices.session.token.id, 'filter': JSON.stringify({'where': $.extend(where, __.component.filter), 'skip': skip, 'limit': limit})}, this)
        .then(function(obj){
          let json = obj.response.json();
          __.component.data_warehouse = json.res;
          __.component.total_warehouse = json.total;
        }).catch(function(err){
          __.component.authService.catchErr(err);
        })
    }).catch((err)=>{
      this.authService.catchErr(err);
    })
  }
  insertWarehouseData(data) {
    data['deleted'] = false;
    data['addwho'] = this.appServices.session.token.uid;
    data['token'] = this.appServices.session.token.id;
    data['parentuser'] = data['parentuser'] ? data['parentuser'] : (this.appServices.session.isAdmin ? '' : this.appServices.session.token.uid);
    this.appServices.insertWarehouse({'obj': JSON.stringify(data)}, this).then(function(__){
      let res = __.response.json().res;
      res['addresscode'] = res.warehousecode;
      res['addressname'] = res.warehousename;
      res['username'] = res.parentuser;
      res['status'] = res.hide?0:1;
      __.component.appServices.findUserxApp({'token': __.component.appServices.session.token.id, 'filter': JSON.stringify({'where': {'appcode': 'sem', 'deleted': false, 'username': res.parentuser}})}, this)
      .then(function(obj){
        let json = obj.response.json();
        if(json.total > 0){
          __.component.appServices.SEM_insertUsersxaddress({'obj': JSON.stringify(res)}, this).then(function(obj){
          }).catch(function(err){
          })
        }
      }).catch(function(err){
      })
      __.component.notifyService.show('Process Done');
      __.component.loadWarehouseData();
    }).catch((err)=>{
      this.authService.catchErr(err);
    })
  }
  updateWarehouseData(data) {
    data['deleted'] = false;
    data['editwho'] = this.appServices.session.token.uid;
    data['token'] = this.appServices.session.token.id;
    data['parentuser'] = data['parentuser']?data['parentuser']:(this.appServices.session.isAdmin?'': this.appServices.session.token.uid);
    this.appServices.updateWarehouse({'obj': JSON.stringify(data)}, this).then(function(__){
      data['addresscode'] = data.warehousecode;
      data['addressname'] = data.warehousename;
      data['username'] = data.parentuser;
      data['status'] = data.hide?0:1;
      __.component.appServices.findUserxApp({'token': __.component.appServices.session.token.id, 'filter': JSON.stringify({'where': {'appcode': 'sem', 'deleted': false, 'username': data.parentuser}})}, this)
      .then(function(obj){
        let json = obj.response.json();
        if(json.total > 0){
          __.component.appServices.SEM_insertUsersxaddress({'obj': JSON.stringify(data)}, this).then(function(obj){
          }).catch(function(err){
          })
        }
      }).catch(function(err){
      })
      __.component.notifyService.show('Process Done');
      __.component.loadWarehouseData();
    }).catch((err)=>{
      this.authService.catchErr(err);
    })
  }
  onChoose(e, data){
    if(e.target.checked) {
      this.delete_warehouse.push(data);
    }
    else {
      let index = this.delete_warehouse.indexOf(data);
      this.delete_warehouse.splice(index, 1);
    }
  }
  findWarehouseData(data){
    this.selected_warehouse = Object.assign({}, data);
  }
  deleteWarehouseData(){
    this.delete_warehouse.forEach((value, index, arr) => {
      value['deleted'] = true;
      value['editwho'] = this.appServices.session.token.uid;
      value['token'] = this.appServices.session.token.id;
        this.appServices.updateWarehouse({'obj': JSON.stringify(value)}, this).then(function(__){
          __.component.appServices.findUserxApp({'token': __.component.appServices.session.token.id, 'filter': JSON.stringify({'where': {'appcode': 'sem', 'deleted': false, 'username': value.parentuser}})}, this)
          .then(function(obj){
            let json = obj.response.json();
            if(json.total > 0){
              __.component.appServices.SEM_insertUsersxaddress({'obj': JSON.stringify(value)}, this).then(function(obj){
              }).catch(function(err){
              })
            }
          }).catch(function(err){
          })
        __.component.notifyService.show('Process Done');
        __.component.loadWarehouseData();
        $('#modalDelete').nodal('hide');
      }).catch((err)=>{
        this.authService.catchErr(err);
      })
    })
  }
  checkAll(e) {
    if(e.srcElement.checked){
      this.data_warehouse.forEach(curr_data=>{
        curr_data.state = e.target.checked;
        if(!this.delete_warehouse.includes(curr_data)){
          this.delete_warehouse.push(curr_data);
        }
      })
    } else {
      this.data_warehouse.forEach(x=>x.state = e.target.checked);
      this.delete_warehouse = [];
    }
  }
  isAllChecked() {
    return this.data_warehouse.every(_ => _.state);
  }
  go(data){
    this.appServices.findUserxApp({'token': this.appServices.session.token.id, 'filter': JSON.stringify({'where': {'appcode': 'wms', 'deleted': false, 'username': data.parentuser}})}, this)
    .then(function(__){
      let json = __.response.json();
      if(json.total > 0){
        __.component.appServices.findApps({'token': __.component.appServices.session.token.id, 'filter': JSON.stringify({'where': {'appcode': 'wms'}})}, this).then(function(obj){
          let json = obj.response.json().res;
          if(json.length > 0){
            window.open(json[0].url + __.component.appServices.session.token.id + '/' + data.warehousecode + '^*^' + data.warehousename, '_blank');
          } else {
            __.component.notifyService.show('Error! <br /> Please check URL App Warehouse Management System!', 'danger');
          }
        }).catch((err)=>{
          this.authService.catchErr(err);
        })
      } else {
        __.component.notifyService.show('Error! <br />This warehouse is not owned by the Warehouse Manage System!', 'danger');
      }
    }).catch((err)=>{
      this.authService.catchErr(err);
    })

  }
}
