import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { AppServices } from './../../app.services';
import { NotifyService } from './../../notify.service';

declare var $:any;
declare var Waypoint:any;

@Component({
  selector: 'app-owner',
  templateUrl: './owner.component.html',
  styleUrls: ['./owner.component.css']
})
export class OwnerComponent implements OnInit {
  data_owner; ; selected_owner; total_owner;
  count_owner = 0; delete_owner = [];
  filter;
  data_warehouse; data_lottable;
  constructor(private router: Router, private appServices: AppServices, private notifyService: NotifyService) { }
  ngOnInit() {
    this.loadOwnerData();
    this.loadWarehouseData();
    new Waypoint({
      element: document.getElementById('pagination'),
      handler: (direction) => {
        if(direction == 'down') {
          this.notifyService.show('Info', 'Load more');
          this.loadOwnerData('', this.count_owner);
        }
      },
      context: document.getElementById('pagination').parentElement.parentElement.parentElement,
    })
  }

  //Load Data
  loadWarehouseData() {
    this.appServices.listWarehouse({'token': this.appServices.session.token.id, 'deleted': false, 'skip': 0}, this).then(function(obj){
      obj.component.data_warehouse = obj.response.json().res;
    }).catch(function(err){
      //err.component.notifyService.show('Error', err.err.json().error.message, 'danger');
    })
  }

  loadOwnerData(param = '', skip = 0) {
    if(param) {
      this.filter = $.extend(this.filter, param);
      let paramIndex = Object.keys(this.filter).indexOf(Object.keys(param)[0]);
      if(!(Object.values(this.filter)[paramIndex]).like){
        delete this.filter[Object.keys(param)[0]];
      }
    }
    if (skip === 0) {
      this.data_owner = [];
      this.count_owner = skip;
      this.delete_owner = [];
    }
    this.appServices.findStorer({'token': this.appServices.session.token.id, 'filter': JSON.stringify({'where': $.extend({'deleted': false, 'type': 1}, this.filter), 'skip': skip})}, this).then(function(obj){
        let json = obj.response.json();
        if(obj.component.data_owner) {
          obj.component.data_owner = obj.component.data_owner.concat(json.res);
        }
        else {
          obj.component.data_owner = json.res;
        }
        obj.component.count_owner += json.res.length;
        obj.component.total_owner = json.total;
        Waypoint.refreshAll();
      }).catch(function(err){
        //err.component.notifyService.show('Error', err.err.json().error.message, 'danger');
      })

  }

  insertOwnerData(data) {
    this.appServices.getUsers(this.appServices.session.token.id, this).then(function(success){
      data['deleted'] = false;
      // data['ageindays'] = parseInt(data['ageindays']);
      data['addwho'] = success.response.json().res.uid;
      data['type'] = '1';
      data['token'] = success.response.json().res.id;
      console.log(data);
      success.component.appServices.insertStorer(data, this).then(function(obj){
        let res = obj.response.json().res;
        //obj.component.notifyService.show('Info', 'Process Done');
        console.log('Insert success');
        success.component.loadOwnerData();
      }).catch(function(err){
        console.log('Insert false');
        //err.component.notifyService.show('Error', err.err.json().error.message, 'danger');
      })
    }).catch(function(errtoken){
      console.log('Token Invalid');
    })
  }

  updateOwnerData(data) {
    this.appServices.getUsers(this.appServices.session.token.id, this).then(function(success){
      data['deleted'] = false;
      data['editwho'] = success.response.json().res.uid;
      data['type'] = '1';
      data['token'] = success.response.json().res.id;
      success.component.appServices.updateStorer(data, this).then(function(obj){
        let res = obj.response.json().res;
        // obj.component.notifyService.show('Info', 'Process Done');
        console.log('update success');
        success.component.loadOwnerData();
      }).catch(function(err){
        // err.component.notifyService.show('Error', err.err.json().error.message, 'danger');
      })
    }).catch(function(errToken){
      console.log('Token Invalid');
    })
  }
  onChoose(e, data){
    if(e.target.checked) {
      this.delete_owner.push(data);
    }
    else {
      let index = this.delete_owner.indexOf(data);
      this.delete_owner.splice(index, 1);
    }
    console.log(this.delete_owner);
  }
  findOwnerData(data){
    this.selected_owner = data;
  }
  deleteOwnerData(){
    this.appServices.getUsers(this.appServices.session.token.id, this).then(function(success){
      success.component.delete_owner.forEach((value, index, arr) => {
        value['deleted'] = true;
        value['editwho'] = success.response.json().res.uid;
        value['token'] = success.response.json().res.id;
        success.component.appServices.updateStorer(value, this).then(function(obj){
          let res = obj.response.json().res;
          console.log('delete success');
          // this.notifyService.show('Info', 'Process Done');
          success.component.loadOwnerData();
        }).catch(function(err){
          // err.component.notifyService.show('Error', err.err.json().error.message, 'danger');
        })
      })
    }).catch(function(errtocken){
      console.log('Token Invalid');
    })
  }

  // CheckAll data_shipment
  checkAll(e) {
    if(e.srcElement.checked){
      this.data_owner.forEach(curr_data=>{
        curr_data.state = e.target.checked;
        if(!this.delete_owner.includes(curr_data)){
          this.delete_owner.push(curr_data);
        }
      })
    } else {
      this.data_owner.forEach(x=>x.state = e.target.checked);
      this.delete_owner = [];
    }
    console.log(this.delete_owner);
  }

  isAllChecked() {
    return this.data_owner.every(_ => _.state);
  }

}
