'use strict';
var app = require('../../server/server');
var shortid = require('shortid');
var _ = require("underscore");
module.exports = function(Warehouse) {
  Warehouse.validatesUniquenessOf('warehousecode');
  Warehouse.afterRemote('**', function(ctx, result, next) {
    if(result.res['count']){
      _.extend(ctx.result, {'total': result.res['count']});
      next();
    } else {
      var where = ctx.args;
      if(ctx.args.filter) {
        where = JSON.parse(ctx.args.filter).where;
      }
      Warehouse.count(where, function (err, count) {
        _.extend(ctx.result, {'total': count});
        next();
      })
    }
  });
  Warehouse.listWarehouse = function(obj, filter = '{}', callback) {
    var data = JSON.parse(obj);
    var params = JSON.parse(filter);
    var select = "Select warehouse.id, warehouse.warehousecode, warehouse.warehousename, warehouse.notes, warehouse.hide, userxapp.appcode  ";
    var from =  " from warehouse "
    +"left join userxapp on warehouse.parentuser = userxapp.username ";
    var where = data.parentuser !== '' ? " where warehouse.deleted = "+ data.deleted +" and warehouse.parentuser = '"+ data.parentuser +"' " : " where warehouse.deleted = "+ data.deleted;
    for (let i = 0; i < Object.keys(params).length; i++) {
      where += 'AND ' + Object.keys(params)[i] + ' ? ';
    }
    Warehouse.dataSource.connector.execute(select + from + where + ' LIMIT ?, ?' , _.values(params).concat([parseInt(data.skip), parseInt(data.skip) + parseInt(data.limit)]), function(err, res) {
      if (err) callback(err);
      else {
        Warehouse.dataSource.connector.execute('SELECT COUNT(*) as TOTAL ' + from + where , _.values(params), function(err, total) {
          if (err) callback(err);
          else {
            res['count'] = total[0].TOTAL;
            callback(null, res);
          }
        })
      }
    })
  };



  //new version
  Warehouse.findWarehouse = function(token, filter, callback) {
    app.models.Token._validToken(token).then(function(result){
      Warehouse.find(JSON.parse(filter)).then(function(obj){
        callback(null, obj);
      }).catch(function(err){
        callback(err);
      })
    }).catch(function(err){
      callback(err);
    })
  };
  Warehouse.insertWarehouse = function(obj, callback) {
    var data = JSON.parse(obj);
    app.models.Token._validToken(data.token).then(function(result){
      Warehouse.findOne({where: {'warehousecode': data.warehousecode}}).then(function(object){
        if(object){
          if(object.deleted){
            Warehouse.updateAll({'warehousecode': data.warehousecode},{
              'warehousename': data.warehousename,
              'parentuser': data.parentuser,
              'deleted': false,
              'notes': data.notes,
              'hide': data.hide,
              'editdate': new Date().toISOString(),
              'editwho': data.addwho
            }).then(function(res){
              data['id'] = object.id;
              callback(null, data);
            }).catch(function(err){
              callback(err);
            })
          } else {
            var err = new Error();
            err.statusCode = err.status = 404;
            err.message = 'Data is existed';
            callback(err);
          }
        } else {
          Warehouse.create({
            'warehousecode': data.warehousecode,
            'warehousename': data.warehousename,
            'parentuser': data.parentuser,
            'deleted': false,
            'notes': data.notes,
            'hide': data.hide,
            'adddate': new Date().toISOString(),
            'addwho': data.addwho
          }).then(function(res){
            callback(null, res);
          }).catch(function(err){
            callback(err);
          })
        }
      })
    }).catch(function(err){
      callback(err);
    })
  };
  Warehouse.updateWarehouse = function(obj, callback) {
    var data = JSON.parse(obj);
    app.models.Token._validToken(data.token).then(function(result){
      Warehouse.updateAll({'warehousecode': data.warehousecode},{
        'warehousename': data.warehousename,
        'parentuser': data.parentuser,
        'deleted': data.deleted,
        'notes': data.notes,
        'hide': data.hide,
        'editdate': new Date().toISOString(),
        'editwho': data.editwho
      }).then(function(res){
        callback(null, data);
      }).catch(function(err){
        callback(err);
      })
    }).catch(function(err){
      callback(err);
    })
  };

};
