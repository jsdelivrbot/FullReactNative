import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { AppServices } from './../../app.services';
import { NotifyService } from './../../notify.service';
import { AuthService } from './../../auth/auth.service';
declare var $:any;
declare var Waypoint:any;
@Component({
  selector: 'app-admin-warehouse',
  templateUrl: './admin-warehouse.component.html',
  styleUrls: ['./admin-warehouse.component.css']
})
export class AdminWarehouseComponent implements OnInit {
  data_warehouse; ; selected_warehouse; total_warehouse;
  data_parentuser = [];
  count_warehouse = 0; delete_warehouse = [];
  filter;
  constructor(private router: Router, private appServices: AppServices, private notifyService: NotifyService, private authService: AuthService) { }

  ngOnInit() {
    this.loadWarehouseData();
    this.loadParentUserData();
    new Waypoint({
      element: document.getElementById('pagination'),
      handler: (direction) => {
        if(direction == 'down') {
          this.notifyService.show('Load more');
          this.loadWarehouseData('', this.count_warehouse);
        }
      },
      context: document.getElementById('pagination').parentElement.parentElement.parentElement,
    })
  }
  loadParentUserData() {
    this.appServices.listUsers({'token': this.appServices.session.token.id, 'deleted': false, 'parentuser': ''}, this).then(function(obj){
      obj.component.data_parentuser = obj.response.json().res;
    }).catch(function(err){
      err.component.authService.catchErr(err);
    })
  }
  loadWarehouseData(param = '', skip = 0) {
    if(param) {
      this.filter = $.extend(this.filter, param);
      let paramIndex = Object.keys(this.filter).indexOf(Object.keys(param)[0]);
      if(!(Object.values(this.filter)[paramIndex]).like){
        delete this.filter[Object.keys(param)[0]];
      }
    }
    if (skip === 0) {
      this.data_warehouse = [];
      this.count_warehouse = skip;
      this.delete_warehouse = [];
    }
    let _filter = {};
    if(this.appServices.session.isAdmin){
      _filter = {'deleted': false};
    } else {
      _filter = {'deleted': false, 'parentuser': this.appServices.session.token.uid};
    }
    this.appServices.findWarehouse({'token': this.appServices.session.token.id, 'filter': JSON.stringify({'where': $.extend(_filter, this.filter), 'skip': skip})}, this).then(function(obj){
      let json = obj.response.json();
      if(obj.component.data_warehouse) {
        obj.component.data_warehouse = obj.component.data_warehouse.concat(json.res);
      }
      else {
        obj.component.data_warehouse = json.res;
      }
      obj.component.count_warehouse += json.res.length;
      obj.component.total_warehouse = json.total;
      Waypoint.refreshAll();
    }).catch(function(err){
      err.component.authService.catchErr(err);
    })
  }
  insertWarehouseData(data) {
    data['deleted'] = false;
    data['addwho'] = this.appServices.session.token.uid;
    data['token'] = this.appServices.session.token.id;
    data['parentuser'] = data['parentuser'] ? data['parentuser'] : (this.appServices.session.isAdmin ? '' : this.appServices.session.token.uid);
    this.appServices.insertWarehouse(data, this).then(function(success){
      success.component.notifyService.show('Process Done');
      success.component.loadWarehouseData();
    }).catch(function(err){
      err.component.authService.catchErr(err);
    })
  }
  updateWarehouseData(data) {
    data['deleted'] = false;
    data['editwho'] = this.appServices.session.token.uid;
    data['token'] = this.appServices.session.token.id;
    data['parentuser'] = data['parentuser']?data['parentuser']:(this.appServices.session.isAdmin?'': this.appServices.session.token.uid);
    this.appServices.updateWarehouse(data, this).then(function(success){
      success.component.notifyService.show('Process Done');
      success.component.loadWarehouseData();
    }).catch(function(err){
      err.component.authService.catchErr(err);
    });
  }
  onChoose(e, data){
    if(e.target.checked) {
      this.delete_warehouse.push(data);
    }
    else {
      let index = this.delete_warehouse.indexOf(data);
      this.delete_warehouse.splice(index, 1);
    }
  }
  findWarehouseData(data){
    this.selected_warehouse = Object.assign({}, data);
  }
  deleteWarehouseData(){
    this.delete_warehouse.forEach((value, index, arr) => {
      value['deleted'] = true;
      value['editwho'] = this.appServices.session.token.uid;
      value['token'] = this.appServices.session.token.id;
      this.appServices.updateWarehouse(value, this).then(function(success){
        success.component.notifyService.show('Process Done');
        success.component.loadWarehouseData();
      }).catch(function(err){
        err.component.authService.catchErr(err);
      })
    })
  }
  checkAll(e) {
    if(e.srcElement.checked){
      this.data_warehouse.forEach(curr_data=>{
        curr_data.state = e.target.checked;
        if(!this.delete_warehouse.includes(curr_data)){
          this.delete_warehouse.push(curr_data);
        }
      })
    } else {
      this.data_warehouse.forEach(x=>x.state = e.target.checked);
      this.delete_warehouse = [];
    }
  }
  isAllChecked() {
    return this.data_warehouse.every(_ => _.state);
  }
}
