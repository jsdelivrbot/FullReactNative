import { Component, OnInit, ViewChild, ElementRef} from '@angular/core';
import { Router, ActivatedRoute, Params  } from '@angular/router';
import { AppServices } from './../../app.services';
import { NotifyService } from './../../notify.service';
import { NgStyle } from '@angular/common';
import * as md5 from "md5";
declare var $:any;
declare var Waypoint:any;
@Component({
  selector: 'app-usersmanagement',
  templateUrl: './usersmanagement.component.html',
  styleUrls: ['./usersmanagement.component.css']
})
export class UsersmanagementComponent implements OnInit {
  @ViewChild('myModal') el:ElementRef;
  data_users; _id;
  filter;
  data_roles = []; data_userroles = []; collect_roles = []; collect_userroles = [];
  data_apps = []; data_userapps = []; collect_apps = []; collect_userapps = [];
  constructor(private router: Router, private appServices: AppServices, private notifyService: NotifyService, private activatedRoute : ActivatedRoute) { }
  ngOnInit() {
    this.activatedRoute.params.subscribe((params: Params) => {
      this._id = params['id'];
    });
    this.loadUsersData();
  }
  //Filter Data
  filterRolesData(userroles) {
    this.appServices.listAllRoles({'token': this.appServices.session.token.id, 'deleted': false}, this).then(function(obj){
      if(userroles.length > 0){
        let data = obj.response.json().res;
        obj.component.data_roles = data.filter(function(f){
          if(userroles.findIndex(function(z){
            if(f.rolecode === z.rolecode) return z;
          }) < 0) {
            return f;
          }
        })
      } else {
        obj.component.data_roles = obj.response.json().res;
      }
    }).catch(function(err){
      err.component.notifyService.show(err.err.json().error.message, 'danger');
    })
  }
  filterAppsData(userapps) {
      this.appServices.listAllApps({'token': this.appServices.session.token.id, 'deleted': false}, this).then(function(obj){
        if(userapps.length > 0){
          let data = obj.response.json().res;
          obj.component.data_apps = data.filter(function(f){
            if(userapps.findIndex(function(z){
              if(f.appcode === z.appcode) return z;
            }) < 0) {
              return f;
            }
          })
        } else {
            obj.component.data_apps = obj.response.json().res;
        }
      }).catch(function(err){
        err.component.notifyService.show(err.err.json().error.message, 'danger');
      })
  }
  //load data
  loadUserxRoleData(username) {
    this.appServices.getRolesUserxRole({'token': this.appServices.session.token.id, 'username': username, 'deleted': false}, this).then(function(obj){
      obj.component.data_userroles = obj.response.json().res;
      obj.component.filterRolesData(obj.component.data_userroles);
    }).catch(function(err){
      err.component.notifyService.show(err.err.json().error.message, 'danger');
    })
  }
  loadUserxAppData(username) {
    this.appServices.getAppsUserxApp({'token': this.appServices.session.token.id, 'username': username, 'deleted': false}, this).then(function(obj){
      obj.component.data_userapps = obj.response.json().res;
      obj.component.filterAppsData(obj.component.data_userapps);
    }).catch(function(err){
      err.component.notifyService.show(err.err.json().error.message, 'danger');
    })
  }
  loadUsersData(){
    this.appServices.findUsers({'token': this.appServices.session.token.id, 'filter': JSON.stringify({'where': {'id': this._id}})}, this).then(
      (success)=>{
        let json = success.response.json();
        if(this.data_users) {
          this.data_users = this.data_users.concat(json.res[0]);
        }
        else {
          this.data_users = json.res[0];
        }
        this.loadUserxRoleData(json.res[0].username);
        this.loadUserxAppData(json.res[0].username);
      }).catch(function(err){
        err.component.notifyService.show(err.err.json().error.message, 'danger');
      })
    }
    updateUsersData(data) {
      this.appServices.checkToken({'token': this.appServices.session.token.id}, this).then(function(success){
        let _rs = success.response.json().res;
        data['deleted'] = false;
        data['editwho'] = _rs.uid;
        data['type'] = parseInt(data['type']);
        data['token'] = _rs.id;
        success.component.appServices.updateUsers(data, this).then(function(obj){
          let res = obj.response.json().res;
          //UserxRole
          success.component.appServices.deleteUserxRole({'token': _rs.id,'username': data.username, 'deleted': true, 'notes': 'deleted', 'editwho': _rs.uid}, this).then(function(del){
            success.component.data_userroles.forEach((value, index, arr)=>{
              success.component.appServices.saveUserxRole({ 'token': _rs.id, 'username': data.username, 'rolecode': value.rolecode, 'notes': '', 'addwho': _rs.uid, 'editwho': _rs.uid  }, this).then(function(save){
              }).catch(function(err_save){
                err_save.component.notifyService.show(err_save.err.json().error.message, 'danger');
              })
            })
          }).catch(function(err_del){
            err_del.component.notifyService.show(err_del.err.json().error.message, 'danger');
          })
          //UserxApp
          success.component.appServices.deleteUserxApp({'token': _rs.id,'username': data.username, 'deleted': true, 'notes': 'deleted', 'editwho': _rs.uid}, this).then(function(del){
            success.component.data_userapps.forEach((value, index, arr)=>{
              success.component.appServices.saveUserxApp({ 'token': _rs.id, 'username': data.username, 'appcode': value.appcode, 'notes': '', 'addwho': _rs.uid, 'editwho': _rs.uid  }, this).then(function(save){
              }).catch(function(err_save){
                err_save.component.notifyService.show(err_save.err.json().error.message, 'danger');
              })
            })
          }).catch(function(err_del){
            err_del.component.notifyService.show(err_del.err.json().error.message, 'danger');
          })
          success.component.notifyService.show('Process Done');
        }).catch(function(err){
          err.component.notifyService.show( err.err.json().error.message, 'danger');
        });
      }).catch(function(errtoken){
        console.log('Invalid');
      })
    }

    deleteUsersData(value){
      this.appServices.checkToken({'token': this.appServices.session.token.id}, this).then(function(success){
        let _rs = success.response.json().res;
        value['deleted'] = true;
        value['editwho'] = _rs.uid;
        value['token'] =_rs.id;
        success.component.appServices.updateUsers(value, this).then(function(obj){
          let res = obj.response.json().res;
          success.component.el.nativeElement.click();
          success.component.router.navigate(['users']);
          success.component.notifyService.show('Process Done');
        }).catch(function(err){
          err.component.notifyService.show(err.err.json().error.message, 'danger');
        });
      }).catch(function(errtoken){
        console.log('Invalid');
      })
    }

    changePasswordUsersData(data){
      if(data.password === data.confirmpassword){
        this.appServices.checkToken({'token': this.appServices.session.token.id}, this).then(function(success){
          let _rs = success.response.json().res;
          success.component.appServices.findUsers({'token': _rs.id, 'filter': JSON.stringify({'where': {'username': success.component.data_users.username, 'password': md5(data.passwordold)}})}, this).then(function(exist){
            let json = exist.response.json();
            if(json.res.length > 0) {
              data['deleted'] = false;
              data['username'] = success.component.data_users.username;
              data['editwho'] = _rs.uid;
              data['token'] = _rs.id;
              success.component.appServices.changePasswordUsers(data, this).then(function(obj){
                let res = obj.response.json().res;
                success.component.notifyService.show('Process Done');
              }).catch(function(err){
                err.component.notifyService.show(err.err.json().error.message, 'danger');
              });
            }
            else {
              success.component.notifyService.show('User not found!', 'danger');
            }
          }).catch(function(err){
            err.component.notifyService.show( err.err.json().error.message, 'danger');
          })
        }).catch(function(errtoken){
          console.log('Invalid');
        })
      } else {
        this.notifyService.show('Password comfirm not corrrect', 'danger');
      }
    }

    addAllRoles(){
      this.appServices.listAllRoles({'token': this.appServices.session.token.id, 'deleted': false}, this).then(function(obj){
        obj.component.collect_roles = obj.component.collect_userroles  = [];
        obj.component.data_roles = [];
        obj.component.data_userroles = obj.response.json().res;
      }).catch(function(err){
        err.component.notifyService.show(err.err.json().error.message, 'danger');
      })
    }

    removeAllRoles(){
      this.appServices.listAllRoles({'token': this.appServices.session.token.id, 'deleted': false}, this).then(function(obj){
        obj.component.collect_roles = obj.component.collect_userroles  = [];
        obj.component.data_userroles = [];
        obj.component.data_roles = obj.response.json().res;
      }).catch(function(err){
        err.component.notifyService.show(err.err.json().error.message, 'danger');
      })
    }

    addRoles(data){
      if(!this.data_userroles.includes(data)){
        this.data_userroles.unshift(data);
        let i = this.data_roles.indexOf(data);
        this.data_roles.splice(i,1);
      }
    }

    removeRoles(data){
      if(!this.data_roles.includes(data)){
        this.data_roles.unshift(data);
        let i = this.data_userroles.indexOf(data);
        this.data_userroles.splice(i, 1);
      }
    }

    addAllApps(){
      this.appServices.listAllApps({'token': this.appServices.session.token.id, 'deleted': false}, this).then(function(obj){
        obj.component.collect_apps = obj.component.collect_userapps  = [];
        obj.component.data_apps = [];
        obj.component.data_userapps = obj.response.json().res;
      }).catch(function(err){
        err.component.notifyService.show(err.err.json().error.message, 'danger');
      })
    }

    removeAllApps(){
      this.appServices.listAllApps({'token': this.appServices.session.token.id, 'deleted': false}, this).then(function(obj){
        obj.component.collect_roles = obj.component.collect_userroles  = [];
        obj.component.data_userapps = [];
        obj.component.data_apps = obj.response.json().res;
      }).catch(function(err){
        err.component.notifyService.show(err.err.json().error.message, 'danger');
      })
    }

    addApps(data){
        if(!this.data_userapps.includes(data)){
          this.data_userapps.unshift(data);
          let i = this.data_apps.indexOf(data);
          this.data_apps.splice(i,1);
        }
    }

    removeApps(data){
        if(!this.data_apps.includes(data)){
          this.data_apps.unshift(data);
          let i = this.data_userapps.indexOf(data);
          this.data_userapps.splice(i, 1);
        }
    }

    changeStatus(data){
      this.data_users['status'] = data['status'] === 1 ? 0 : 1;
    }

    BacktoListusers(){
      this.router.navigate(['/users']);
    }

    refreshUsersData(){
      this.data_users = '';
      this.loadUsersData();
    }

  }
