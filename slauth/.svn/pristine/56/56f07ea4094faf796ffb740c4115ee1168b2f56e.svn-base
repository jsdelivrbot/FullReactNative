import { Component, OnInit, ViewChild, ElementRef} from '@angular/core';
import { Router, ActivatedRoute, Params  } from '@angular/router';
import { AppServices } from './../../app.services';
import { NotifyService } from './../../notify.service';
import { AuthService } from './../../auth/auth.service';
import { NgStyle } from '@angular/common';
import * as md5 from "md5";
declare var $:any;
declare var Waypoint:any;
@Component({
  selector: 'app-admin-usersmanagement',
  templateUrl: './admin-usersmanagement.component.html',
  styleUrls: ['./admin-usersmanagement.component.css']
})
export class AdminUsersmanagementComponent implements OnInit {
  @ViewChild('myModal') el:ElementRef;
  data_user; type = 1;
  _id;
  data_parentuser = [];
  filter;
  data_userlist = []; data_warehouselist = []; data_rolelist = []; data_ownerlist = [];
  data_roles = []; data_userroles = []; collect_roles = []; collect_userroles = [];
  data_apps = []; data_userapps = []; collect_apps = []; collect_userapps = [];
  constructor(private router: Router, private appServices: AppServices, private notifyService: NotifyService, private activatedRoute : ActivatedRoute, private authService: AuthService) { }
  ngOnInit() {
    this.activatedRoute.params.subscribe((params: Params) => {
      this._id = params['id'];
      this.loadUsersData(this._id);
    });
  }
  filterRolesData(userroles, parentuser) {
    this.appServices.listRoles({'token': this.appServices.session.token.id, 'deleted': false, 'parentuser': parentuser}, this).then(function(obj){
      if(userroles.length > 0){
        let data = obj.response.json().res;
        obj.component.data_roles = data.filter(function(f){
          if(userroles.findIndex(function(z){
            if(f.rolecode === z.rolecode) return z;
          }) < 0) {
            return f;
          }
        })
      } else {
        obj.component.data_roles = obj.response.json().res;
      }
    }).catch(function(err){
      err.component.authService.catchErr(err);
    })
  }
  filterAppsData(userapps, parentuser) {
    this.appServices.listApps({'token': this.appServices.session.token.id, 'deleted': false, 'parentuser': parentuser}, this).then(function(obj){
      if(userapps.length > 0){
        let data = obj.response.json().res;
        obj.component.data_apps = data.filter(function(f){
          if(userapps.findIndex(function(z){
            if(f.appcode === z.appcode) return z;
          }) < 0) {
            return f;
          }
        })
      } else {
        obj.component.data_apps = obj.response.json().res;
      }
    }).catch(function(err){
      err.component.authService.catchErr(err);
    })
  }
  loadParentUserData(username) {
    this.appServices.listUsers({'token': this.appServices.session.token.id, 'deleted': false, 'parentuser': '', 'username': username}, this).then(function(obj){
      obj.component.data_parentuser = obj.response.json().res;
    }).catch(function(err){
      err.component.authService.catchErr(err);
    })
  }
  loadUserxRoleData(username, parentuser) {
    this.appServices.getRolesUserxRole({'token': this.appServices.session.token.id, 'username': username, 'deleted': false}, this).then(function(obj){
      obj.component.data_userroles = obj.response.json().res;
      obj.component.filterRolesData(obj.component.data_userroles, parentuser);
    }).catch(function(err){
      err.component.authService.catchErr(err);
    })
  }
  loadUserxAppData(username, parentuser) {
    this.appServices.getAppsUserxApp({'token': this.appServices.session.token.id, 'username': username, 'parentuser': parentuser, 'deleted': false}, this).then(function(obj){
      obj.component.data_userapps = obj.response.json().res;
      obj.component.filterAppsData(obj.component.data_userapps, parentuser);
    }).catch(function(err){
      err.component.authService.catchErr(err);
    })
  }
  loadUserList(username){
    this.appServices.findUsers({'token': this.appServices.session.token.id, 'filter': JSON.stringify({'where': {'parentuser': username, 'deleted': false}})}, this).then(function(obj){
      obj.component.data_userlist = obj.response.json().res;
    }).catch(function(err){
      err.component.authService.catchErr(err);
    })
  }
  loadOwnerList(username, type){
    if(type === 1){
      this.appServices.listStorer({'token': this.appServices.session.token.id, 'type': '1', 'deleted': false, 'parentuser': username}, this).then(function(obj){
        obj.component.data_ownerlist = obj.response.json().res;
      }).catch(function(err){
        err.component.authService.catchErr(err);
      })
    } else {
      this.appServices.listRolexStorer({'token': this.appServices.session.token.id, 'type': '1', 'deleted': false, 'username': username }, this).then(function(obj){
        obj.component.data_ownerlist = obj.response.json().res;
      }).catch(function(err){
        err.component.authService.catchErr(err);
      })
    }
  }
  loadRoleList(username){
    this.appServices.listRoles({'token': this.appServices.session.token.id, 'deleted': false, 'parentuser': username}, this).then(function(obj){
      obj.component.data_rolelist = obj.response.json().res;
    }).catch(function(err){
      err.component.authService.catchErr(err);
    })
  }
  loadWarehouseList(username, type){
    if(type === 1){
      this.appServices.listWarehouse({'token': this.appServices.session.token.id, 'deleted': false, 'parentuser': username}, this).then(function(obj){
        obj.component.data_warehouselist = obj.response.json().res;
      }).catch(function(err){
        err.component.authService.catchErr(err);
      })
    } else {
      this.appServices.listRolexWarehouse({'token': this.appServices.session.token.id, 'username': username, 'deleted': false}, this).then(function(obj){
        obj.component.data_warehouselist = [];
        obj.component.data_warehouselist = obj.response.json().res;
      }).catch(function(err){
        err.component.authService.catchErr(err);
      })
    }

  }
  loadUsersData(id){
    this.appServices.findUsers({'token': this.appServices.session.token.id, 'filter': JSON.stringify({'where': {'id': id}})}, this).then(function(__){
      let _rs = __.response.json().res[0];
      __.component.data_user = _rs;
      __.component.type = _rs.type;
      __.component.loadUserxRoleData(_rs.username, _rs.parentuser);
      __.component.loadUserxAppData(_rs.username, _rs.parentuser);
      __.component.loadParentUserData(_rs.username);
      __.component.loadUserList(_rs.username);
      __.component.loadOwnerList(_rs.username, _rs.type);
      __.component.loadRoleList(_rs.username);
      __.component.loadWarehouseList(_rs.username, _rs.type);
    }).catch(function(err){
      err.component.authService.catchErr(err);
    })
  }
  updateUsersData(data) {
    data['deleted'] = false;
    data['editwho'] = this.appServices.session.token.uid;
    data['type'] = parseInt(data['type']);
    data['token'] = this.appServices.session.token.id;
    data['parentuser'] = data['parentuser'] ? data['parentuser'] : (this.appServices.session.isAdmin ? '' : this.appServices.session.token.uid);
    data['status'] = data['status']?data['status']:this.data_user['status'];
    this.appServices.updateUsers(data, this).then(function(__){
      let res = __.response.json().res;
      data['phonenumber'] = data['tel'];
      if(__.component.data_userapps.findIndex(function(z){
        if(z.appcode === 'sem') return z;
      }) < 0) {
        data['deleted'] = true;
      } else {
        data['deleted'] = false;
      }
      __.component.appServices.deleteUserxRole({'token': __.component.appServices.session.token.id,'username': data.username, 'deleted': true, 'notes': 'deleted', 'editwho': __.component.appServices.session.token.uid}, this).then(function(del_userxrole){
        __.component.data_userroles.forEach((value, index, arr)=>{
          __.component.appServices.saveUserxRole({ 'token': __.component.appServices.session.token.id, 'username': data.username, 'rolecode': value.rolecode, 'notes': '', 'addwho': __.component.appServices.session.token.uid, 'editwho': __.component.appServices.session.token.uid  }, this).then(function(save_userxrole){
          }).catch(function(err){
            __.component.authService.catchErr(err);
          })
        })
        __.component.appServices.deleteUserxApp({'token': __.component.appServices.session.token.id,'username': data.username, 'deleted': true, 'notes': 'deleted', 'editwho': __.component.appServices.session.token.uid}, this).then(function(del_userxapp){
          __.component.data_userapps.forEach((value, index, arr)=>{
            __.component.appServices.saveUserxApp({ 'token': __.component.appServices.session.token.id, 'username': data.username, 'appcode': value.appcode, 'notes': '', 'addwho': __.component.appServices.session.token.uid, 'editwho': __.component.appServices.session.token.uid  }, this).then(function(save_userxapp){
              if(value.appcode === 'sem'){
                __.component.appServices.SEM_updateUser({'obj': JSON.stringify(data)}, this).then(function(obj){
                }).catch(function(err){
                  __.component.authService.catchErr(err);
                })
              }
            }).catch(function(err){
              __.component.authService.catchErr(err);
            })
          })
          __.component.notifyService.show('Process Done');
          __.component.loadOwnerList(data.username, data.type);
          __.component.loadWarehouseList(data.username, data.type);
        }).catch(function(err){
          __.component.authService.catchErr(err);
        })
      }).catch(function(err){
        __.component.authService.catchErr(err);
      })
    }).catch((err)=>{
      this.authService.catchErr(err);
    });
  }

  deleteUsersData(value){
    value['deleted'] = true;
    value['editwho'] = this.appServices.session.token.uid;
    value['token'] = this.appServices.session.token.id;
    this.appServices.updateUsers(value, this).then(function(__){
      __.component.el.nativeElement.click();
      __.component.router.navigate(['admin/users']);
      __.component.notifyService.show('Process Done');
    }).catch(function(err){
      err.component.authService.catchErr(err);
    });
  }
  resetPasswordUsersData(){
    this.appServices.findUsers({'token': this.appServices.session.token.id, 'filter': JSON.stringify({'where': {'username': this.data_user.username}})}, this).then(function(__){
      let json = __.response.json();
      if(json.res.length > 0) {
        __.component.appServices.resetPasswordUsers({'token': __.component.appServices.session.token.id, 'username': __.component.data_user.username, 'editwho': __.component.appServices.session.token.uid}, this).then(function(obj){
          __.component.notifyService.show('Process Done');
        }).catch(function(err){
          __.component.authService.catchErr(err);
        })
      }
      else {
        __.component.notifyService.show('User not found!', 'danger');
      }
    }).catch(function(err){
      err.component.authService.catchErr(err);
    })
  }
  addAllRoles(){
    this.appServices.listRoles({'token': this.appServices.session.token.id, 'deleted': false, 'parentuser': this.data_user.parentuser}, this).then(function(obj){
      obj.component.collect_roles = obj.component.collect_userroles  = [];
      obj.component.data_roles = [];
      obj.component.data_userroles = obj.response.json().res;
    }).catch(function(err){
      err.component.authService.catchErr(err);
    })
  }
  removeAllRoles(){
    this.appServices.listRoles({'token': this.appServices.session.token.id, 'deleted': false, 'parentuser': this.data_user.parentuser}, this).then(function(obj){
      obj.component.collect_roles = obj.component.collect_userroles  = [];
      obj.component.data_userroles = [];
      obj.component.data_roles = obj.response.json().res;
    }).catch(function(err){
      err.component.authService.catchErr(err);
    })
  }
  addRoles(data){
    if(!this.data_userroles.includes(data)){
      this.data_userroles.unshift(data);
      let i = this.data_roles.indexOf(data);
      this.data_roles.splice(i,1);
    }
  }
  removeRoles(data){
    if(!this.data_roles.includes(data)){
      this.data_roles.unshift(data);
      let i = this.data_userroles.indexOf(data);
      this.data_userroles.splice(i, 1);
    }
  }
  addAllApps(){
    this.appServices.listApps({'token': this.appServices.session.token.id, 'deleted': false, 'parentuser': this.data_user.parentuser}, this).then(function(obj){
      obj.component.collect_apps = obj.component.collect_userapps  = [];
      obj.component.data_apps = [];
      obj.component.data_userapps = obj.response.json().res;
    }).catch(function(err){
      err.component.authService.catchErr(err);
    })
  }
  removeAllApps(){
    this.appServices.listApps({'token': this.appServices.session.token.id, 'deleted': false, 'parentuser': this.data_user.parentuser}, this).then(function(obj){
      obj.component.collect_roles = obj.component.collect_userroles  = [];
      obj.component.data_userapps = [];
      obj.component.data_apps = obj.response.json().res;
    }).catch(function(err){
      err.component.authService.catchErr(err);
    })
  }
  addApps(data){
    if(!this.data_userapps.includes(data)){
      this.data_userapps.unshift(data);
      let i = this.data_apps.indexOf(data);
      this.data_apps.splice(i,1);
    }
  }
  removeApps(data){
    if(!this.data_apps.includes(data)){
      this.data_apps.unshift(data);
      let i = this.data_userapps.indexOf(data);
      this.data_userapps.splice(i, 1);
    }
  }
  // changeStatus(status, data){
  //   if(status === 1){
  //     this.data_user['status'] = 1;
  //     if(!$('#status_active').hasClass('active')){
  //       $('#status_active').addClass('active');
  //     }
  //     if($('#status_inactive').hasClass('active')){
  //       $('#status_active').removeClass('active');
  //     }
  //   } else {
  //     this.data_user['status'] = 1;
  //   }
  // }
  activeAccount(data){
  data['status'] = 1;
  this.updateUsersData(data);
}
BacktoListusers(){
  this.router.navigate(['admin/users']);
}
refreshUsersData(){
  this.data_user = '';
  this.loadUsersData(this._id);
}
}
