'use strict';
var app = require('../../server/server');
var shortid = require('shortid');
var _ = require("underscore");
module.exports = function(Userxapp) {
  Userxapp.validatesUniquenessOf({scopedTo: ['username', 'appcode']});
  Userxapp.afterRemote('**', function(ctx, result, next) {
    if(result.res['count']){
      _.extend(ctx.result, {'total': result.res['count']});
      next();
    } else {
      var where = ctx.args;
      if(ctx.args.filter) {
        where = JSON.parse(ctx.args.filter).where;
      }
      Userxapp.count(where, function (err, count) {
        _.extend(ctx.result, {'total': count});
        next();
      })
    }
  });
  Userxapp.listUserxApp = function(token, deleted, callback) {
    app.models.Token._validToken(token).then(function(result){
      Userxapp.dataSource.connector.execute('SELECT userxapp.id, userxapp.username, userxapp.appcode, userxapp.deleted, userxapp.notes, userxapp.adddate, userxapp.addwho, userxapp.editdate, userxapp.editwho FROM userxapp WHERE userxapp.deleted = ?', [deleted], function(err, obj){
        if(err) callback(err);
        callback(null, obj);
      })
    }).catch(function(err){
      callback(err);
    })
  };
  Userxapp.saveUserxApp = function(token, username, appcode, notes, addwho, editwho, callback) {
    app.models.Token._validToken(token).then(function(result){
      Userxapp.findOne({where: {'username': username, 'appcode': appcode}}).then(function(obj){
        if(obj){
          Userxapp.updateAll({'username': username, 'appcode': appcode},{
            'deleted': false,
            'notes': notes,
            'editdate': new Date().toISOString(),
            'editwho': editwho,
          }).then(function(obj){
            callback(null, obj);
          }).catch(function(err){
            callback(err);
          })
        } else {
          Userxapp.create({
            'username': username,
            'appcode': appcode,
            'deleted': false,
            'notes': notes,
            'adddate': new Date().toISOString(),
            'addwho': addwho,
          }).then(function(obj){
            callback(null, obj);
          }).catch(function(err){
            callback(err);
          })
        }
      })
    }).catch(function(err){
      callback(err);
    })
  };

  Userxapp.getAppsUserxApp = function(obj, callback) {
    var data = JSON.parse(obj);
    app.models.Token._validToken(data.token).then(function(result){
      let strSQL = '';
      if(data.parentuser === ''){
        strSQL = 'SELECT apps.id, apps.appcode,apps.appname, apps.notes FROM apps left join Userxapp on apps.appcode = Userxapp.appcode where Userxapp.username = "'+ data.username +'" and Userxapp.deleted = '+ data.deleted +' ';
      } else {
        strSQL = 'SELECT apps.id, apps.appcode,apps.appname, apps.notes FROM apps '
        +'left join Userxapp child on apps.appcode = child.appcode '
        +'left join Userxapp parent on apps.appcode = parent.appcode '
        +'where child.username = "'+ data.username +'" and parent.username = "'+ data.parentuser +'" and child.deleted = '+ data.deleted +' and parent.deleted = '+ data.deleted +' ';
      }
      Userxapp.dataSource.connector.execute(strSQL, [], function(err, res){
        if(err) callback(err);
        callback(null, res);
      })
    }).catch(function(err){
      callback(err);
    })
  };


  // new version
  Userxapp.findUserxApp = function(token, filter, callback) {
    app.models.Token._validToken(token).then(function(result){
      Userxapp.find(JSON.parse(filter)).then(function(obj){
        callback(null, obj);
      }).catch(function(err){
        callback(err);
      })
    }).catch(function(err){
      callback(err);
    })
  };
  Userxapp.updateUserxApp = function(obj, callback) {
    var data = JSON.parse(obj);
    app.models.Token._validToken(data.token).then(function(result){
      Userxapp.dataSource.connector.execute('Update userxapp SET deleted = true Where username = ? ', [data.username],
      function(err_del, res_del){
        if(err_del) callback(err_del);
        data.userxapp.forEach(function(value, index, arr){
          Userxapp.findOne({where: {'username': data.username, 'appcode': value.appcode}}).then(function(res_find){
            if(res_find){
              Userxapp.updateAll({'username': data.username, 'appcode': value.appcode},{
                'deleted': false,
                'editdate': new Date().toISOString(),
                'editwho': data.editwho
              }).then(function(res){
              }).catch(function(err){
                callback(err);
              })
            } else {
              Userxapp.create({
                'username': data.username,
                'appcode': value.appcode,
                'deleted': false,
                'adddate': new Date().toISOString(),
                'addwho': data.editwho
              }).then(function(res){
              }).catch(function(err){
                callback(err);
              })
            }
          }).catch(function(err){
            callback(err);
          })
        });
        callback(null, data);
      })
    }).catch(function(err){
      callback(err);
    })
  };
  Userxapp.deleteUserxApp = function(obj, callback) {
    var data = JSON.parse(obj);
    app.models.Token._validToken(data.token).then(function(result){
      Userxapp.updateAll({'username': data.username},{
        'deleted': true,
        'editdate': new Date().toISOString(),
        'editwho': data.editwho,
      }).then(function(res){
        callback(null, data);
      }).catch(function(err){
        callback(err);
      })
    }).catch(function(err){
      callback(err);
    })
  };

};
