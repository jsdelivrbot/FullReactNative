'use strict';
var app = require('../../server/server');
var shortid = require('shortid');
var _ = require("underscore");
module.exports = function(Apps) {
  Apps.validatesUniquenessOf('appcode');
  Apps.afterRemote('**', function(ctx, result, next) {
    if(result.res['count']){
      _.extend(ctx.result, {'total': result.res['count']});
      next();
    } else {
      var where = ctx.args;
      if(ctx.args.filter) {
        where = JSON.parse(ctx.args.filter).where;
      }
      Apps.count(where, function (err, count) {
        _.extend(ctx.result, {'total': count});
        next();
      })
    }
  });

  Apps.getApps = function(token, username, deleted, appcode, callback) {
    app.models.Token._validToken(token).then(function(result){
      Apps.dataSource.connector.execute('SELECT apps.appcode, apps.url, userxapp.username FROM apps left join userxapp on apps.appcode = userxapp.appcode where userxapp.username = ? and userxapp.deleted = ? and apps.appcode = ? ', [username, deleted, appcode ], function(err, obj){
        if(err) callback(err);
        callback(null, obj);
      })
    }).catch(function(err){
      callback(err);
    })
  };

  //new version
  Apps.findApps = function(token, filter, callback) {
    var data = JSON.parse(filter);
    app.models.Token._validToken(token).then(function(result){
      Apps.find(data).then(function(res){
        callback(null, res);
      }).catch(function(err){
        callback(err);
      })
    }).catch(function(err){
      callback(err);
    })
  };
  Apps.listApps = function(obj, callback) {
    var data = JSON.parse(obj);
    app.models.Token._validToken(data.token).then(function(result){
      let strSQL = '';
      if(data.parentuser === ''){
        strSQL = 'SELECT apps.id, apps.appcode,apps.appname, apps.notes from apps WHERE apps.deleted = ?';
      } else {
        strSQL = 'SELECT apps.id, apps.appcode,apps.appname, apps.notes from apps left join userxapp on apps.appcode = userxapp.appcode where userxapp.deleted = ? and userxapp.username = ?';
      }
      Apps.dataSource.connector.execute(strSQL, [data.deleted, data.parentuser], function(err, res){
        if(err) callback(err);
        callback(null, res);
      })
    }).catch(function(err){
      callback(err);
    })
  };
  Apps.insertApps = function(obj, callback) {
    var data = JSON.parse(obj);
    app.models.Token._validToken(data.token).then(function(result){
      Apps.findOne({where: {'appcode': data.appcode}}).then(function(object){
        if(object){
          if(object.deleted){
            Apps.updateAll({'appcode': data.appcode},{
              'appname': data.appname,
              'deleted': false,
              'url': data.url,
              'signout_url': data.signout_url,
              'notes': data.notes,
              'adddate': new Date().toISOString(),
              'addwho': data.addwho,
              'editdate': new Date().toISOString(),
              'editwho': data.addwho
            }).then(function(res){
              data['id'] = object.id;
              callback(null, data);
            }).catch(function(err){
              callback(err);
            })
          } else {
            var err = new Error();
            err.statusCode = err.status = 404;
            err.message = 'Data is existed';
            callback(err);
          }
        } else {
          Apps.create({
            'appcode': data.appcode,
            'appname': data.appname,
            'deleted': false,
            'url': data.url,
            'signout_url': data.signout_url,
            'notes': data.notes,
            'adddate': new Date().toISOString(),
            'addwho': data.addwho
          }).then(function(res){
            callback(null, res);
          }).catch(function(err){
            callback(err);
          })
        }
      })
    }).catch(function(err){
      callback(err);
    })
  };
  Apps.updateApps = function(obj, callback) {
    var data = JSON.parse(obj);
    app.models.Token._validToken(data.token).then(function(result){
      Apps.updateAll({'appcode': data.appcode},{
        'appname': data.appname,
        'deleted': data.deleted,
        'url': data.url,
        'signout_url': data.signout_url,
        'notes': data.notes,
        'editdate': new Date().toISOString(),
        'editwho': data.editwho
      }).then(function(res){
        callback(null, data);
      }).catch(function(err){
        callback(err);
      })
    }).catch(function(err){
      callback(err);
    })
  };

};
