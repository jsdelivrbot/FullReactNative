'use strict';
var app = require('../../server/server');
var shortid = require('shortid');
var _ = require("underscore");
var limit = 12;
module.exports = function (Ward) {
  Ward.validatesUniquenessOf();
  Ward.observe('access', function setMaxLimit(ctx, next) {
    ctx.query.limit = limit;
    next();
  });
  Ward.afterRemote('**', function (ctx, result, next) {
    _.extend(ctx.result, { 'total': result.res['count'] });
    _.extend(ctx.result, { 'page': result.res['count'] / limit });
    next();
  });
  Ward.findWard = function (filter, callback) {
    Ward.find(JSON.parse(filter)).then(function (obj) {
      callback(null, obj);
    }).catch(function (err) {
      callback(err);
    })
  };
  Ward.listWard = function (districtcode, callback) {
    Ward.dataSource.connector.execute('SELECT id, districtcode, wardcode, wardname FROM ward where deleted = false and districtcode = ? ', [districtcode], function(err, res) {
      if (err)
      callback(err);
      else {
        Ward.dataSource.connector.execute('SELECT  COUNT(*) AS TOTAL FROM ward where deleted = false and districtcode = ? ', [districtcode], function(err, total) {
          if (err) callback(err);
          else {
            res['count'] = total[0].TOTAL;
            callback(null, res);
          }
        });
      }
    });
  };
  Ward.insertWard = function (obj, callback) {
    var data = JSON.parse(obj);
    Ward.create({
      'districtcode': data.districtcode,
      'wardcode': data.wardcode,
      'wardname': data.wardname,
      'adddate': new Date().toISOString(),
      'addwho': data.addwho,
    }).then(function (obj) {
      callback(null, obj);
    }).catch(function (err) {
      callback(err);
    });
  };

  Ward.updateWard = function (obj, callback) {
    var data = JSON.parse(obj);
    Ward.findOne({ where: { 'id': data.id } }).then(function (obj) {
      if (obj) {
        Ward.updateAll({ 'id': data.id }, {
          'districtcode': data.districtcode,
          'wardcode': data.wardcode,
          'wardname': data.wardname,
          'deleted': data.deleted,
          'editdate': new Date().toISOString(),
          'editwho': data.editwho,
        }).then(function (obj) {
          callback(null, obj);
        }).catch(function (err) {
          callback(err);
        });
      }
      else {
        var err = new Error();
        err.statusCode = err.status = 404;
        err.message = 'Data is not existed';
        callback(err);
      }
    })
  };
};
