'use strict';
var app = require('../../server/server');
var limit = 12;
var _ = require("underscore");
module.exports = function(Statistics) {
  Statistics.validatesUniquenessOf('');
  Statistics.observe('access', function setMaxLimit(ctx, next) {
    ctx.query.limit = limit;
    next();
  });
  Statistics.afterRemote('**', function (ctx, result, next) {
    var where = ctx.args;
    if(ctx.args.filter) {
      where = JSON.parse(ctx.args.filter).where;
    }
    Statistics.count(where, function (err, count) {
      _.extend(ctx.result, {'total': count});
      _.extend(ctx.result, {'page': count / limit});
      next();
    })
  });
  Statistics.Total = function(token, deleted, callback) {
    app.models.Token._validToken(token).then(function(result){
      let strSQL = 'SELECT year(adddate) AS year, '
    +'(SELECT count(*) FROM users WHERE users.deleted = ? and users.type = 1 AND year(users.adddate) = year) AS totalcompany, '
    +'(SELECT count(*) FROM users WHERE users.deleted = ? and users.type = 2 AND year(users.adddate) = year) AS totaluser, '
    +'(SELECT count(*) FROM warehouse WHERE warehouse.deleted = ? and year(warehouse.adddate) = year ) AS totalwarehouse, '
    +'(SELECT count(*) FROM storer WHERE storer.deleted = ? and storer.type = "1" and year(storer.adddate) = year ) AS totalowner '
    +'FROM users GROUP BY year';
      Statistics.dataSource.connector.execute(strSQL, [deleted, deleted, deleted, deleted], function(err, obj){
        if(err) callback(err);
        callback(null, obj);
      })
    }).catch(function(err){
      callback(err);
    })
  };
  Statistics.TotalByCompany = function(token, deleted, parentuser, callback) {
    app.models.Token._validToken(token).then(function(result){
      let strSQL = 'SELECT year(adddate) AS year, '
      +'(SELECT count(*) FROM users WHERE users.parentuser = ? and users.deleted = ? and users.type = 2 AND year(users.adddate) = year) AS totaluser, '
      +'(SELECT count(*) FROM warehouse WHERE warehouse.parentuser = ? and warehouse.deleted = ? and year(warehouse.adddate) = year ) AS totalwarehouse, '
      +'(SELECT count(*) FROM storer WHERE storer.parentuser = ? and storer.deleted = ? and storer.type = "1" and year(storer.adddate) = year ) AS totalowner '
      +'FROM users GROUP BY year ' ;
      Statistics.dataSource.connector.execute(strSQL, [parentuser, deleted, parentuser, deleted, parentuser, deleted], function(err, obj){
        if(err) callback(err);
        callback(null, obj);
      })
    }).catch(function(err){
      callback(err);
    })
  };

};
